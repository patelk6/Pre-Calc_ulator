def cleanBounds(bounds):
	function_bounds = []
	left_bound = -10
	right_bound = 10
	for j in range(len(bounds)):
		
		for i in range(len(bounds[j])):
			
			if(ord(bounds[j][i]) > 65):
				
				continue
			elif(bounds[j][i] == '<'):				
				if(bounds[j][i+1] == '='):
					if(int(bounds[j][i+2:]) > 10):
						function_bounds.append(int(bounds[j][i+2:]))
					else:
						function_bounds.append(10)
					break
				else:
					function_bounds.append(int(bounds[j][i+1:]))
					break
			elif(bounds[j][i] == '>'):
				
				if(bounds[j][i+1] == '='):					
					if(int(bounds[j][i+2:]) < -10):
						function_bounds.append(int(bounds[j][i+2:]))
					else:
						function_bounds.append(-10)
					break
				else:
					function_bounds.append(int(bounds[j][i+1:]))
					break
		
	return function_bounds


lines - graph lines
solving equations/inequalities graphically
functions
graphs of functions, get information from a graph
linear functions/models, transformations of functions
combining functions
one-to-one and their inverses

modeling with functions, variation
quadratic functions and models
polynomial functions
dividing polynomials
complex numbers
complex zeros and fundamental theorem of algebra
rational functions
polynomial and rational inequalities